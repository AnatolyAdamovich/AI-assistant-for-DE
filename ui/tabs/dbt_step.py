import sys
import os
import yaml

# –ê–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –∫ src –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Ç–µ–∫—É—â–µ–≥–æ —Ñ–∞–π–ª–∞
src_path = os.path.abspath(os.path.join(os.path.dirname(__file__), '..', '..'))
if src_path not in sys.path:
    sys.path.append(src_path)

import streamlit as st
from src.core.llm_generators.dbt import DbtGenerator
from src.core.models.analytics import AnalyticsSpec

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –º–æ–¥–µ–ª–∏
def show_model(name, content, is_yaml=False):
    label = f"{name}.yml" if is_yaml else f"{name}.sql"
    with st.expander(label):
        if is_yaml:
            if isinstance(content, bytes):
                content_str = content.decode('utf-8')
            else:
                content_str = yaml.dump(content, sort_keys=False, allow_unicode=True)
            st.code(content_str, language="yaml")
        else:
            st.code(content, language="sql")

st.markdown(
    "<h1 style='display: flex; align-items: center;'>"
    "<img src='https://cdn-icons-png.flaticon.com/128/9672/9672242.png' width='70' style='margin-right: 10px'/>"
    "–®–∞–≥ 3: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è DBT-–ø—Ä–æ–µ–∫—Ç–∞"
    "</h1>",
    unsafe_allow_html=True
)

uploaded_spec = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ AnalyticsSpec (yaml)")
if uploaded_spec:
    data = yaml.safe_load(uploaded_spec)
    analytics_spec = AnalyticsSpec(**data)
    if analytics_spec:
        if st.button("–ó–∞–ø—É—Å–∫ AI üöÄ"):
            with st.spinner("–û–±—Ä–∞–±–æ—Ç–∫–∞ ..."):
                dbt_project = DbtGenerator(analytics_spec).generate_project()
            st.success("dbt-–ø—Ä–æ–µ–∫—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω!")

            # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º —Ä–∞–∑–¥–µ–ª–∞–º –ø—Ä–æ–µ–∫—Ç–∞
            for section in ['stage', 'core', 'marts']:
                st.markdown(f"### –°–ª–æ–π: {section}")
                models = dbt_project.get(section, {})
                for model_name, model_content in models.items():
                    if model_name == 'schema_yml':
                        show_model("schema", model_content, is_yaml=True)
                    else:
                        show_model(model_name, model_content, is_yaml=False)